<application>
  <div if={ state.isLoggedIn }>
    <navigation application={ this }></navigation>

    <div class="clearfix" />

    <div class="application-body container">
      <locations application={ this } params={ state.controller.params } if={ isController('locations') }></locations>
      <location application={ this } params={ state.controller.params } if={ isController('location') }></location>
      <boxes application={ this } params={ state.controller.params } if={ isController('boxes') }></boxes>
      <box application={ this } params={ state.controller.params } if={ isController('box') }></box>
      <items application={ this } params={ state.controller.params } if={ isController('items') }></items>
      <item application={ this } params={ state.controller.params } if={ isController('item') }></item>
      <search application={ this } params={ state.controller.params } if={ isController('search') }></search>
      <config application={ this } params={ state.controller.params } if={ isController('config') }></config>
    </div>
  </div>

  <div if={ !state.isLoggedIn } class="container">
    <login></login>
  </div>

  <script>
    import './application.css'
    import Registry from './registry.js'
    import Navigation from './navigation.riot'
    import Locations from '../controller/locations/locations.riot'
    import Location from '../controller/locations/location.riot'
    import Boxes from '../controller/boxes/boxes.riot'
    import Box from '../controller/boxes/box.riot'
    import Items from '../controller/items/items.riot'
    import Item from '../controller/items/item.riot'
    import Search from '../controller/search/search.riot'
    import Config from '../controller/config/config.riot'

    //const isLoggedIn = Login.exports.login()
    const isLoggedIn = true

    export default {
      application: this,
      currentControllerName: false,
      state: {
        controller: false,
        isLoggedIn: isLoggedIn,
      },

      components: {
        Navigation,
        Locations,
        Location,
        Boxes,
        Box,
        Items,
        Item,
        Search,
        Config,
      },

      parseUrl(url = "localhost#locations") {
        let controllerParams = []
        let controller = 'locations'
        let urlParts = url.split('#')

        if (urlParts.length > 1) {
          controller = urlParts[1]
        }

        let controllerParts = controller.split('/')
        if (controllerParts.length > 1) {
          controller = controllerParts[0]
          controllerParams = controllerParts.splice(1, controllerParts.length)
        }

        return {
          name: controller,
          params: controllerParams
        }
      },

      hashChange(e) {
        // close the burger menu if open
        if (document.getElementsByClassName('menu-btn')[0].checked) {
          document.getElementsByClassName('menu-btn')[0].checked = false
        }
        if (e.newURL) {
          this.render(e.newURL)
        }
      },

      clickHandler(e) {
        // close the burger menu if open
        if (document.getElementsByClassName('menu-btn')[0].checked) {
          document.getElementsByClassName('menu-btn')[0].checked = false
        }
      },

      render(url) {
        let controller = this.getController(url)
        
        if (controller.name == this.getCurrentController()) {
          this.update({
            controller: {}
          })
        }

        this.currentControllerName = controller.name
        this.registry.eventBus.trigger('applicationRender')

        this.update({
          controller: controller
        })
      },

      onBeforeMount() {
        this.registry.application = this
        window.addEventListener("hashchange", this.hashChange)
      },

      async onMounted() {
        let devices = await navigator.mediaDevices.enumerateDevices();
        this.render(document.URL)
      },

      getController(url) {
        return this.parseUrl(url)
      },

      isController(controllerName) {
        return this.state.controller.name == controllerName
      },

      getCurrentController() {
        return this.currentControllerName
      },
    }
  </script>
</application>
