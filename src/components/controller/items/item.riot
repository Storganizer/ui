<item>
    
    <element-header
      if={ ! state.edit && state.item } 
      type="item"
      element={ state.item }
      next={ state.nextItem ? "#item/" + state.nextItem.id : "" }
      previous={ state.previousItem ? "#item/" + state.previousItem.id : "" }
    />
    <element-detail if={ !state.edit && state.item } type="item" element={ state.item } box={ state.box } location={ state.location }  />
    <element-form if={ state.edit && state.item } type="item" element={ state.item } onCancel={ closeEdit } />

  <script>
    import  './style.css'

    import ElementHeader from '../../includes/_helper/element-header.riot'
    import ElementDetail from '../../includes/_helper/element-detail.riot'
    import ElementForm from '../../includes/_helper/element-form.riot'


    export default {
      components: {
        ElementHeader,
        ElementDetail,
        ElementForm,
      },

      state: {
        nextItem: false,
        previousItem: false,
        id: false,
        edit: false,
        item: false,
        box: false,
        location: false,
        edit: false,
      },

      closeEdit() {
        this.registry.application.render('#item/' + this.state.id)

        // cheap hack to reload the image after upload, could fetch the url until a 200 is there. Only if the current box has an image, of course
        const myTimeout = setTimeout(function() {
          clearTimeout(myTimeout);
          this.registry.eventBus.trigger('imageUploaded')
        }.bind(this), 1000);
      },

      setupListenter() {
        let target = this

        this.registry.eventBus.on('dataItemLoadSuccess', function(locations) {
          target.loadData()
        })

        this.registry.eventBus.on('dataBoxLoadSuccess', function(locations) {
          target.loadData()
        })

        this.registry.eventBus.on('dataLocationLoadSuccess', function(locations) {
          target.loadData()
        })

      },

      loadData() {
        let item = this.registry.dataStore.items.getItemById(this.state.id)
        if (!item) {
          return false
        }

        let boxId = item && item.boxId ? item.boxId : 0
        let box = this.registry.dataStore.boxes.getBoxById(boxId)
        let locationId = box && box.locationId ? box.locationId : 0
        let location = this.registry.dataStore.locations.getLocationById(locationId)
        let nextItem = this.registry.dataStore.items.getNext(item)
        let previousItem = this.registry.dataStore.items.getPrevious(item)

        this.update({
          location: location,
          box: box,
          item: item,
          nextItem: nextItem ? nextItem : false,
          previousItem: previousItem ? previousItem : false,
        })

      },

      onMounted() {
        this.update({
          id: this.props.params[0],
          edit: this.props.params[1] == 'edit',
          add: this.props.params[1] == 'add',
        })
        this.setupListenter()
        this.loadData()
      }
    }
  </script>
</item>