<config>

  <label for="api-url">Api URL</label>
  <input placeholder="http://127.0.0.1:5000" name="api-url" id="api-url" type="text" value="{ state.apiUrl }"></input>

  <label if={ state.cameras.length > 1 } for="cameraLabel">Preferred camera</label>
  <select if={ state.cameras.length > 1 } name="cameraLabel" id="cameraLabel">
    <option selected={ !state.cameraLabel || state.cameraLabel == '' } value="" >choose camera</option>
    <option selected={ state.cameraLabel == camera.label } each={ camera in state.cameras } value={ camera.label }>{ camera.label }</option>
  </select>

  <label for="personId">Who are you?</label>
    <select name="personId" id="personId">
      <option selected={ state.personId == element.id } each={ element in state.persons } value={ element.id }>{ element.name }</option>
    </select>


  <label for="listView">List view</label>
  <select name="listView" id="listView">
    <option selected={ state.listView == 'list' } value="list" >list</option>
    <option selected={ state.listView == 'image' } value="image">image</option>
  </select>

  <button onclick={ save }>Save</button>


  <!--<input onchange={ setListView } type="checkbox" id="listView" name="listView" value="imageList">-->

  <label>Backup</label>
  <button onclick={ backup } href="{ state.apiUrl }/backup">Backup (Only data - No images yet)</button>
  <!--
  <label>Restore</label>
  <button onclick={ restore }>Restore (Only data - No images yet)</button>
  -->
  <script>

    export default {
      localStorage: window.localStorage,

      state: {
        apiUrl: "http://127.0.0.1:5000",
        listView: "list",
        personId: 0,
        persons: false,
        cameraLabel: "",
        cameras: [],
      },

      save(e) {
        let apiUrl = document.getElementById("api-url").value
        this.registry.dataStore.setApiHost(apiUrl)
        this.localStorage.setItem("apiUrl", apiUrl)

        let cameraLabelSelect = document.getElementById("cameraLabel")
        let cameraLabel = ''
        if (cameraLabelSelect) {
          cameraLabel = cameraLabelSelect.value
        } else if (this.state.cameras.length == 1) {
          cameraLabel = this.state.cameras[0].label
        }

        let personIdSelect = document.getElementById("personId")
        let personId = 0
        if (personIdSelect) {
          personId = personIdSelect.value
        }

        let listViewSelect = document.getElementById("listView")
        let listView = 'list'
        if (listViewSelect) {
          listView = listViewSelect.value
        }

        this.localStorage.setItem("listView", listView)
        this.localStorage.setItem("cameraLabel", cameraLabel)
        this.localStorage.setItem("personId", personId)

        window.location.reload();
      },

      backup() {
        window.location = this.state.apiUrl + "/backup"
      },

      setListView(e) {
        if (e.target && e.target.checked) {
          this.localStorage.setItem("listView", 'image')
        } else {
          this.localStorage.setItem("listView", 'list')
        }
      },

      setupListenter() {
        this.registry.eventBus.on('dataPersonLoadSuccess', function(locations) {
          this.loadPersonData()
        }.bind(this))
      },

      loadPersonData() {
        this.update({
          persons: this.registry.dataStore.persons.getPersons()
        })
      },

      async onMounted(e) {
        this.setupListenter()
        this.loadPersonData()

        // ask for camera permissions

        let useCamera = false
        let permissionObj = await navigator.permissions.query({name: 'camera'})

        if (permissionObj.state == 'prompt') {
          useCamera = true
          // request permissions
          let stream = await navigator.mediaDevices.getUserMedia({audio: false, video: true})
          if (stream) {
            stream.getTracks().forEach(function(track) {
              track.stop()
            })
          }

        } else if (permissionObj.state == 'granted') {
          useCamera = true
        }

        let devices = []
        if (useCamera == true) {
          devices = await navigator.mediaDevices.enumerateDevices()
        }

        let cameras = [];
        let cameraFound = false

        for (const device of devices) {
          if (device.kind === "videoinput") {
            cameras.push({
              label: device.label
            })
          }
        }

        for (const camera of cameras) {
          if (cameras.length == 1 || (!cameraFound && camera.label.includes("back"))) {
            cameraFound = true
            this.localStorage.setItem("cameraLabel", camera.label)
          }
        }

        this.update({
          apiUrl: this.localStorage.getItem("apiUrl"),
          listView: this.localStorage.getItem("listView"),
          cameraLabel: this.localStorage.getItem("cameraLabel"),
          personId: this.localStorage.getItem("personId"),
          cameras: cameras,
        })
      },

    }
  </script>
</config>