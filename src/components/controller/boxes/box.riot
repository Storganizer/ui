<box>
    <element-header
      if={ ! state.edit && state.box } 
      type="box"
      element={state.box}
      next={ state.nextBox ? "#box/" + state.nextBox.id : "" }
      previous={ state.previousBox ? "#box/" + state.previousBox.id : "" }
      edit="#box/{state.box.id}/edit"
      add="#box/{state.box.id}/add"
    />

    <element-detail if={ !state.edit && state.box } type="box" element={ state.box } location={ state.location }  />
    

    <element-form if={ state.edit && state.box } type="box" element={ state.box }  />

    <!-- Form
    <div class="form clearfix" if={ state.edit && state.box }>
      <box-form box={ state.box } onCancel={ toggleEdit }></box-form>
    </div>
    -->

    <div class="list">
      <items-list if={ state.box} items={ state.items } boxId={ state.box.id } ></items-list>
    </div>

  <script>
    import  './style.css'
    import ElementDetail from '../../includes/_helper/element-detail.riot'
    import ElementHeader from '../../includes/_helper/element-header.riot'
    import ElementForm from '../../includes/_helper/element-form.riot'
    import ElementList from '../../includes/_helper/element-list.riot'
    import ItemsList from '../../includes/item/list.riot'

    export default {
      components: {
        ElementDetail,
        ElementHeader,
        ElementForm,
        ItemsList,
      },

      state: {
        nextBox: false,
        previousBox: false,
        timestamp: Date.now(),
        box: false,
        location: false,
        items: false,
        edit: false,
        id: false,
      },

      /*toggleEdit() {
        this.update({
          edit: !this.state.edit,
          timestamp: Date.now(),
        })

        // cheap hack to reload the image after upload, could fetch the url until a 200 is there. Only if the current box has an image, of course
        const myTimeout = setTimeout(function() {
          clearTimeout(myTimeout);
          this.update({
            timestamp: Date.now(),
          })
        }.bind(this), 1000);
      },*/

      setupListenter() {
        let target = this

        this.registry.eventBus.on('dataBoxLoadSuccess', function(boxes) {
          target.loadBoxAndLocationData()
        })


        this.registry.eventBus.on('dataLocationLoadSuccess', function(boxes) {
          target.loadBoxAndLocationData()
        })


        this.registry.eventBus.on('dataItemLoadSuccess', function(items) {
          target.loadItemData()
        })

      },

      clickHandler(e) {
        // hack to rerender if only the controller properties have changed
        this.registry.application.render('')
        this.registry.application.clickHandler(e)
      },

      loadBoxAndLocationData() {
        let box = this.registry.dataStore.boxes.getBoxById(this.state.id)
        let locationId = box && box.locationId ? box.locationId : 0
        let nextBox = this.registry.dataStore.boxes.getNext(box)
        let previousBox = this.registry.dataStore.boxes.getPrevious(box)
        this.update({
          box: box,
          nextBox: nextBox ? nextBox : false,
          previousBox: previousBox ? previousBox : false,
          location: this.registry.dataStore.locations.getLocationById(locationId)
        })
      },

      loadItemData() {
        this.update({
          items: this.registry.dataStore.items.getItemsByBoxId(this.state.id)
        })

      },

      onMounted() {
        this.update({
          id: this.props.params[0],
          edit: this.props.params[1] == 'edit'
        })
        this.setupListenter()
        this.loadBoxAndLocationData()
        this.loadItemData()
      }
    }
  </script>
</box>