<box>
    <element-header
      if={ !state.edit && state.box } 
      type="box"
      element={state.box}
      next={ state.nextBox ? "#box/" + state.nextBox.id : "" }
      previous={ state.previousBox ? "#box/" + state.previousBox.id : "" }
    />
    <element-detail if={ !state.edit && state.box } type="box" element={ state.box } location={ state.parentLocation } person={ state.person } box={state.parentBox }  />
    <element-form if={ state.edit && state.box } type="box" element={ state.box } onCancel={ closeEdit }  />
    <div if={ state.add && state.emptyItem } class="add-form">
      <h2>Add an item to the box</h2>
      <element-form type="item" element={ state.emptyItem } onCancel={ closeEdit }  />
    </div>
    <element-list if={ state.boxes && state.boxes[0] } elements={ state.boxes } type="box" />
    <element-list elements={ state.items } type="item" />
  <script>

    import  './style.css'
    import ElementHeader from '../../includes/_helper/element-header.riot'
    import ElementDetail from '../../includes/_helper/element-detail.riot'
    import ElementForm from '../../includes/_helper/element-form.riot'
    import ElementList from '../../includes/_helper/element-list.riot'

    export default {
      components: {
        ElementHeader,
        ElementDetail,
        ElementForm,
        ElementList,
      },

      state: {
        nextBox: false,
        previousBox: false,
        box: false,
        parentBox: false,
        location: false,
        parentLocation: false,
        person: false,
        items: false,
        boxes: false,
        edit: false,
        id: false,
        emptyItem: false
      },

      closeEdit() {
        this.registry.application.render('#box/' + this.state.id)

        // cheap hack to reload the image after upload, could fetch the url until a 200 is there. Only if the current box has an image, of course
        const myTimeout = setTimeout(function() {
          clearTimeout(myTimeout);
          this.registry.eventBus.trigger('imageUploaded')
        }.bind(this), 1000);
      },

      setupListenter() {
        let target = this

        this.registry.eventBus.on('dataBoxLoadSuccess', function(boxes) {
          target.loadBoxLocationAndPersonData()
        })


        this.registry.eventBus.on('dataLocationLoadSuccess', function(boxes) {
          target.loadBoxLocationAndPersonData()
        })


        this.registry.eventBus.on('dataItemLoadSuccess', function(items) {
          target.loadItemData()
        })

      },

      clickHandler(e) {
        // hack to rerender if only the controller properties have changed
        this.registry.application.render('')
        this.registry.application.clickHandler(e)
      },

      loadBoxLocationAndPersonData() {
        let box = this.registry.dataStore.boxes.getBoxById(this.state.id)
        if (!box) {
          return false
        }

        let locationId = box && box.locationId ? box.locationId : 0
        let parentLocationId = box && box.parentLocationId ? box.parentLocationId : 0
        let boxId = box && box.id ? box.id : 0
        let parentBoxId = box && box.boxId ? box.boxId : 0
        let personId = box && box.personId ? box.personId : 0
        let nextBox = this.registry.dataStore.boxes.getNext(box)
        let previousBox = this.registry.dataStore.boxes.getPrevious(box)
        console.log(box)
        this.update({
          box: box,
          nextBox: nextBox ? nextBox : false,
          previousBox: previousBox ? previousBox : false,
          location: this.registry.dataStore.locations.getLocationById(locationId),
          parentLocation: this.registry.dataStore.locations.getLocationById(parentLocationId),
          person: this.registry.dataStore.persons.getPersonById(personId),
          boxes: this.registry.dataStore.boxes.getBoxesByBoxId(boxId),
          parentBox: this.registry.dataStore.boxes.getBoxById(parentBoxId)
        })
      },

      loadItemData() {
        this.update({
          items: this.registry.dataStore.items.getItemsByBoxId(this.state.id)
        })
      },

      loadBoxData() {
        this.update({
          boxes: this.registry.dataStore.boxes.getBoxesByBoxId(this.state.id)
        })
      },

      onMounted() {
        this.update({
          id: this.props.params[0],
          edit: this.props.params[1] == 'edit',
          add: this.props.params[1] == 'add',
        })

        this.update({
          emptyItem: {
            name: '',
            description: '',
            amount: 1,
            boxId: this.state.id
          }
        })

        this.setupListenter()
        this.loadBoxLocationAndPersonData()
        this.loadItemData()
        this.loadBoxData()
      }
    }
  </script>

  <style>
  .add-form {
    display: block;
    background-color: white;
    padding: 10px;
    border-radius: 3px;
  }
  </style>

</box>