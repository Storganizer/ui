<location>
    <element-header
      if={ ! state.edit && state.location } 
      type="location"
      element={state.location}
      next={ state.nextLocation ? "#location/" + state.nextLocation.id : "" }
      previous={ state.previousLocation ? "#location/" + state.previousLocation.id : "" }
      edit="#location/{state.location.id}/edit"
      add="#location/{state.location.id}/add"
    />
    <element-detail if={ !state.edit && state.location } type="location" element={ state.location } />
    <element-form if={ state.edit && state.location } type="location" element={ state.location } onCancel={ toggleEdit }  />
    <div if={ state.add && state.emptyBox } class="add-form">
      <h2>Add a box to the loction</h2>
      <element-form type="box" element={ state.emptyBox } onCancel={ toggleEdit }  />
    </div>
    <element-list elements={ state.boxes } type="box" />

  <script>
    import  './style.css'
    import QrCode from '../../includes/_helper/qr-code.riot'
    import ElementHeader from '../../includes/_helper/element-header.riot'
    import ElementDetail from '../../includes/_helper/element-detail.riot'
    import ElementForm from '../../includes/_helper/element-form.riot'
    import ElementList from '../../includes/_helper/element-list.riot'

    export default {
      components: {
        QrCode,
        ElementHeader,
        ElementDetail,
        ElementForm,
        ElementList,
      },

      state: {
        nextLocation: false,
        previousLocation: false,
        location: false,
        boxes: [],
        showQr: true,
        edit: false,
        emptyBox: false
      },

      toggleEdit() {
        this.registry.application.render('#location/' + this.state.id)
      },

      setupListenter() {
        let target = this
        this.registry.eventBus.on('dataLocationLoadSuccess', function(locations) {
          target.loadLocationData()
        })

        this.registry.eventBus.on('dataBoxLoadSuccess', function(locations) {
          target.loadBoxData()
        })
      },

      loadLocationData() {
        let location = this.registry.dataStore.locations.getLocationById(this.props.params[0])
        if (!location) {
          return false
        }
        let nextLocation = this.registry.dataStore.locations.getNext(location)
        let previousLocation = this.registry.dataStore.locations.getPrevious(location)

        this.update({
          nextLocation: nextLocation ? nextLocation : false,
          previousLocation: previousLocation ? previousLocation : false,
          location: location
        })
      },

      loadBoxData() {
        this.update({
            boxes: this.registry.dataStore.boxes.getBoxesByLocationId(this.props.params[0])
        })
      },

      onMounted() {
        this.update({
          id: this.props.params[0],
          edit: this.props.params[1] == 'edit',
          add: this.props.params[1] == 'add',
        })

        this.update({
          emptyBox: {
            name: '',
            description: '',
            locationId: this.state.id
          }
        })

        this.setupListenter()
        this.loadLocationData()
        this.loadBoxData()
      }
    }
  </script>

  <style>
  .add-form {
    display: block;
    background-color: white;
    padding: 10px;
    border-radius: 3px;
  }
  </style>

</location>