<take-picture>

    <p><button if={ !state.cameraActive } class="no-print" onclick={ openCamera }>Open Camera</button></p>
    <p><button if={ state.cameraActive } class="no-print" onclick={ closeCamera }>Close Camera</button></p>

    <button if={ state.cameraActive } class="snapshot no-print" onclick={ snapshot }>Snapshot</button>
    <p if={ state.pictureTaken }>
      <canvas class="webcam-image" id="canvas"></canvas>
    </p>
    <p if={ !state.pictureTaken && props.currentPicture }>
      <img class="webcam-image" src={ props.currentPicture } />
    </p>

  <script>

    export default {
      localStorage: window.localStorage,
      stream: false,
      camera: false,
      canvas: false,
      context: false,
      state: {
        cameraActive: false,
        pictureTaken: false,
      },

      closeCamera(e) {

        let body = document.getElementsByTagName('body')[0]
        let fullScreen = document.getElementById('fullscreen')
        if (fullScreen) {
          body.removeChild(fullScreen)
        }
        let camera = document.getElementById("camera")
        if (camera) {
          let stream = camera.srcObject;
          if (stream) {
            stream.getTracks().forEach(function(track) {
              track.stop()
            })
          }
        }

        if (this.update) {
          this.update({
            cameraActive: false
          })
        }
      },

      openCamera(e) {


        let body = document.getElementsByTagName('body')[0]
        let fullScreen = document.createElement('div')
        let video = document.createElement('video')
        fullScreen.id = "fullscreen"
        
        video.className = 'webcam-video'
        video.setAttribute('muted', '1')
        video.setAttribute('autoplay', '1')
        video.setAttribute('playsinline', 'playsinline')
        video.setAttribute('webkit-playsinline', '1')
        video.id = 'camera'
        fullScreen.prepend(video)
        body.prepend(fullScreen);

        this.update({
          cameraActive: true
        })

        this.camera = document.getElementById("camera")
        navigator.mediaDevices.getUserMedia({
          'video': {
              'deviceId': this.localStorage.getItem("cameraId")
          },
          'audio': false,
        }).then(function(stream) {
           this.stream = stream
           this.camera.srcObject = this.stream;
           console.log(this.camera.srcObject)
        }.bind(this)).catch(function(err) {
           console.error('getUserMediaError', err, err.stack);
        })
      },

      snapshot() {
        this.update({
          pictureTaken: true
        })
        
        this.canvas = document.getElementById('canvas')
        this.camera = document.getElementById('camera')
        if (this.canvas) {
          console.log(this.canvas)
          this.canvas.width = this.camera.videoWidth
          this.canvas.height = this.camera.videoHeight

          this.context = this.canvas.getContext('2d')
          this.context.drawImage(this.camera, 0, 0);
          this.closeCamera()
        } else {
          console.log('focking canvas not found')
        }

      },

      getEncodedImage() {
        let canvas = document.getElementById('canvas')
        if (!canvas) {
          return ''
        }
        return canvas.toDataURL().replace(/^data:image\/png;base64,/, "")
      },


    }
  </script>
  <style>

    #canvas {
      max-width: 300px;
    }

    .webcam-video,  .webcam-image{
      max-width: 300px;
      border: 1px solid #9b4dca;
    }

    .snapshot {
      position: absolute;
      z-index: 200;
    }

  </style>
</take-picture>