<element-form>
  <p if={ props.element }>
    <take-picture if={ props.type != 'locationType' } currentPicture="{ state.apiHost }{ props.element.image }"></take-picture>
    <input placeholder="Name" ame="element-name" id="element-name" type="text" value="{ props.element.name }"></input>
    <textarea placeholder="Description" name="element-description" id="element-description">{ props.element.description }</textarea>

    <input if={ props.type == 'item' } placeholder="Amount" name="element-amount" id="element-amount" value={ props.element.amount }></input>

    <input class="margin-right" if={ props.type == 'box' } onchange={ boxInBox } type="checkbox" id="element-box-in-box" name="element-box-in-box" checked={ state.boxInBox }  />
    <label class="no-block" if={ props.type == 'box' } for="element-box-in-box">This box is in another box</label>

    <label if={ props.type == 'box' && !state.boxInBox } for="element-location-id">Location</label>
    <select if={ props.type == 'box' && !state.boxInBox } name="element-location-id" id="element-location-id">
      <option selected={ !props.element.locationId || props.element.locationId <= 0 } value="0" >unlocated</option>
      <option selected={ props.element.parentLocationId == element.id } each={ element in state.locations } value={ element.id }>{ element.name }</option>
    </select>

    <label if={ props.type == 'box' && state.boxInBox } for="element-in-box-id">Box</label>
    <select if={ props.type == 'box' && state.boxInBox } name="element-in-box-id" id="element-in-box-id">
      <option selected={ !props.element.locationId || props.element.locationId <= 0 } value="0" >unboxed</option>
      <option if={ props.element.id != element.id } selected={ props.element.boxId == element.id } each={ element in state.boxes } value={ element.id }>{ element.name }</option>
    </select>

    <label if={ props.type == 'box' } for="element-person-id">Belongs to</label>
    <select if={ props.type == 'box' } name="element-person-id" id="element-person-id">
      <option selected={ !props.element.personId || props.element.personId <= 0 } value="0" >everybody</option>
      <option selected={ props.element.personId == element.id } each={ element in state.persons } value={ element.id }>{ element.name }</option>
    </select>

    <label if={ props.type == 'item' } for="element-box-id">Box</label>
    <select if={ props.type == 'item' } name="element-box-id" id="element-box-id">
      <option selected={ !props.element.boxId || props.element.boxId <= 0 } value="0" >unboxed</option>
      <option selected={ props.element.boxId == element.id } each={ element in state.boxes } value={ element.id }>{ element.name }</option>
    </select>

    <select if={ props.type == 'location' } name="element-classification" id="element-classification">
      <option value="0">Location Type</option>
      <option selected={ props.element.classification == 5 } value="5">Outside</option>
      <option selected={ props.element.classification == 4 } value="4">Basement</option>
      <option selected={ props.element.classification == 3 } value="3">Attic</option>
      <option selected={ props.element.classification == 2 } value="2">Living Area</option>
      <option selected={ props.element.classification == 1 } value="1">My Room</option>
    </select>
  </p>

  <div class="form-buttons" if={ props.element }>
    <button onclick={ saveEntry }>Save</button>
    <button class="button-outline" onclick={ onCancel }>Cancel</button>
    <button if={ props.element.id } class="button-delete" onclick={ deleteEntry }>Delete</button>
  </div>
  
  <script>
    import TakePicture from '../../includes/_helper/take-picture.riot'

    export default {
      components: {
        TakePicture,
      },

      state: {
        boxInBox: true,
        locations: false,
        boxes: false,
        persons: false,
      },

      boxInBox(e) {
        let checked = false
        if (e.target) {
          checked = e.target.checked
        }

        this.update({
            boxInBox: checked
        })

      },

      onCancel() {
        TakePicture.exports.closeCamera()
        this.props.onCancel()
      },

      setupListenter() {
        this.registry.eventBus.on('dataLocationLoadSuccess', function(locations) {
          this.loadLocationData()
        }.bind(this))

        this.registry.eventBus.on('dataBoxLoadSuccess', function(locations) {
          this.loadBoxData()
        }.bind(this))
      },

      loadLocationData() {
        this.update({
            locations: this.registry.dataStore.locations.getLocations()
        })
      },

      loadBoxData() {
        this.update({
            boxes: this.registry.dataStore.boxes.getBoxes()
        })
      },

      loadPersonData() {
        this.update({
            persons: this.registry.dataStore.persons.getPersons()
        })
      },

      loadApiUrl() {
        this.update({
            apiHost: this.registry.dataStore.getApiHost()
        })
      },

      onMounted() {
        this.setupListenter()
        this.loadApiUrl()
        this.loadLocationData()
        this.loadBoxData()
        this.loadPersonData()

        if (this.props && this.props.type == 'box') {
          let boxInBox = false
          if (parseInt(this.props.element.boxId) > 0) {
            boxInBox = true
          }

          this.update({
              boxInBox: boxInBox
          })
        }
      },

      saveEntry(e) {
        TakePicture.exports.closeCamera()

        let element = {
          id: this.props.element.id || 0,
          name: document.getElementById("element-name").value,
          description: document.getElementById("element-description").value,
        }

        if (this.props.type !== 'locationType') {
          element.image = TakePicture.exports.getEncodedImage()
        }

        let dataStore

        switch(this.props.type) {
          case 'location':
            element.classification = parseInt(document.getElementById("element-classification").value)
            dataStore = this.registry.dataStore.locations
            break
          case 'locationType':
            dataStore = this.registry.dataStore.locationTypes
            break

          case 'box':
            let locationId = 0
            let inBoxId = 0

            if (document.getElementById("element-location-id")) {
              locationId = parseInt(document.getElementById("element-location-id").value)
            }

            if (document.getElementById("element-in-box-id")) {
              inBoxId = parseInt(document.getElementById("element-in-box-id").value)
            }

            let personId = parseInt(document.getElementById("element-person-id").value)
            if (locationId > 0) {
              element.locationId = locationId
            }
            if (inBoxId > 0) {
              element.boxId = inBoxId
            }
            if (personId > 0) {
              element.personId = personId
            }
            dataStore = this.registry.dataStore.boxes
            break
          case 'item':
            element.amount = parseInt(document.getElementById("element-amount").value)
            let boxId = parseInt(document.getElementById("element-box-id").value)
            if (boxId > 0) {
              element.boxId = boxId
            }
            dataStore = this.registry.dataStore.items
            break
          case 'person':
            dataStore = this.registry.dataStore.persons
            break
        }

        if (element.id > 0) {
          dataStore.updateEntry(element)
          this.props.onCancel()
        } else {
          dataStore.addEntry(element)
          this.props.onCancel()
        }
      },

      deleteEntry(e) {
        if (!confirm("Really delete this entry?")) {
          return false
        }

        TakePicture.exports.closeCamera()
        
        let redirectUrl
        let dataStore

        switch(this.props.type) {
          case 'location':
            redirectUrl  = '#locations'
            dataStore = this.registry.dataStore.locations
            break
          case 'locationType':
            // todo: remember to inform about the locations sitting without type now
            redirectUrl  = '#locationTypes'
            dataStore = this.registry.dataStore.locationTypes
            break
          case 'box':
            redirectUrl  = '#location/' + document.getElementById("element-location-id").value
            dataStore = this.registry.dataStore.boxes
            break
          case 'item':
            redirectUrl  = '#box/' + document.getElementById("element-box-id").value
            dataStore = this.registry.dataStore.items
            break
          case 'person':
            redirectUrl  = '#persons'
            dataStore = this.registry.dataStore.persons
            break
        }

        
        dataStore.deleteEntry(this.props.element)        
        this.registry.application.render(redirectUrl)
      },
    }

  </script>

  <style>
    button {
      margin-left: 5px;
    }
    video.camera {
      width: 100%
    }
  </style>
</element-form>