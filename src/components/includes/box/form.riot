<box-form class="no-print">
  <p if={ props.box }>
    <p><button class="no-print" onclick={ picture }>Take a picture</button></p>
    <video class="camera" muted autoplay="autoplay" playsinline="playsinline" webkit-playsinline></video>




    <input placeholder="Box" name="box-name" id="box-name" type="text" value="{ props.box.name }"></input>
    <textarea placeholder="Description" name="box-description" id="box-description">{ props.box.description }</textarea>
    <label for="box-location-id">Location</label><select name="box-location-id" id="box-location-id">
      <option selected={ !props.box.locationId || props.box.locationId <= 0 } value="0" >unlocated</option>
      <option selected={ props.box.locationId == element.id } each={ element in state.locations } value={ element.id }>{ element.name }</option>
    </select>
  </p>

  <div class="form-buttons" if={ props.box }>
    <button onclick={ saveEntry }>Save</button>
    <button class="button-outline" onclick={ props.onCancel }>Cancel</button>
    <button if={ props.box.id } class="button-delete" onclick={ deleteEntry }>Delete</button>
  </div>
  
  <script>

    export default {
      state: {
        locations: false
      },


      picture(e) {
        navigator.mediaDevices.getUserMedia({
           video: true,
           audio: false
        }).then(function(stream) {
           var camera = document.getElementsByClassName("camera")[0]; //A video element
           // Attach the stream to the video element
           camera.srcObject = stream;
        }).catch(function(err) {
           console.error('getUserMediaError', err, err.stack);
        })
      },


      setupListenter() {
        let target = this
        this.registry.eventBus.on('dataLocationLoadSuccess', function(locations) {
          target.loadLocationData()
        })
      },

      loadLocationData() {
        this.update({
            locations: this.registry.dataStore.locations.getLocations()
        })
      },

      onMounted() {
        this.setupListenter()
        this.loadLocationData()
      },

      saveEntry(e) {
        let box = {
          id: this.props.box.id || 0,
          name: document.getElementById("box-name").value,
          description: document.getElementById("box-description").value,
          locationId: parseInt(document.getElementById("box-location-id").value),
        }

        if (box.id > 0) {
          this.registry.dataStore.boxes.updateEntry(box)
          this.props.onCancel()
        } else {
          this.registry.dataStore.boxes.addEntry(box)
          this.props.onCancel()
        }
      },

      deleteEntry(e) {
        let redirectUrl  = '#location/' + document.getElementById("box-location-id").value
        this.registry.dataStore.boxes.deleteEntry(this.props.box)
        //window.location.replace(redirectUrl)
        this.registry.application.render(redirectUrl)
      },
    }
  </script>

  <style>
    button {
      margin-right: 5px;
    }
    video.camera {
      width: 100%
    }
  </style>

</box-form>
